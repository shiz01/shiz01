From ac52f7b2626013907237c8c8bfdd2944baea2d00 Mon Sep 17 00:00:00 2001
From: shiz01 <shiz01@tutanota.com>
Date: Wed, 21 Oct 2020 22:20:41 +0700
Subject: [PATCH] Fix build on Gentoo

Signed-off-by: shiz01 <shiz01@tutanota.com>
---
 CMakeLists.txt     | 244 ++++++++++++++++++++++-----------------------
 cpr/CMakeLists.txt |   2 +-
 2 files changed, 123 insertions(+), 123 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index c065227..4639a88 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -50,136 +50,136 @@ endif()
 
 
 include(GNUInstallDirs)
-include(FetchContent)
-include(cmake/code_coverage.cmake)
+#include(FetchContent)
+#include(cmake/code_coverage.cmake)
 
 # Curl configuration
-if(USE_SYSTEM_CURL)
-    find_package(CURL COMPONENTS PROTOCOLS HTTP HTTPS FEATURES SSL)
-    if (CURL_FOUND)
-        set(SSL_ENABLED ON CACHE INTERNAL "" FORCE)
-    else()
-        find_package(CURL COMPONENTS PROTOCOLS HTTP)
-        if(CURL_FOUND)
-            set(SSL_ENABLED OFF CACHE INTERNAL "" FORCE)
-        endif()
-    endif()
-endif()
-if(NOT USE_SYSTEM_CURL OR NOT CURL_FOUND)
-    message(STATUS "Not using system Curl, using built-in curl project instead.")
-    
-    set(BUILD_CURL_EXE OFF CACHE INTERNAL "" FORCE)
-    set(BUILD_TESTING OFF CACHE INTERNAL "" FORCE)
-    set(HTTP_ONLY ON CACHE INTERNAL "" FORCE)
-
-    if (USE_WINSSL OR USE_OPENSSL)
-        set(SSL_ENABLED ON CACHE INTERNAL "" FORCE)
-    else()
-        set(CURL_CA_PATH "none" CACHE INTERNAL "" FORCE)
-    endif()
-
-    if(USE_WINSSL)
-        set(CMAKE_USE_WINSSL ON CACHE INTERNAL "" FORCE)
-        set(CURL_CA_PATH "none" CACHE INTERNAL "" FORCE)
-    endif()
-
-    if(USE_OPENSSL) 
-        set(CMAKE_USE_OPENSSL ON CACHE INTERNAL "" FORCE)
-    endif()
-
-    # Show progress of FetchContent:
-    set(FETCHCONTENT_QUIET OFF CACHE INTERNAL "" FORCE)
-    FetchContent_Declare(curl
-                         GIT_REPOSITORY         https://github.com/curl/curl.git
-                         GIT_TAG                b81e0b07784dc4c1e8d0a86194b9d28776d071c0 # the hash for curl-7_69_1
-                         GIT_PROGRESS           TRUE
-                         USES_TERMINAL_DOWNLOAD TRUE)   # <---- This is needed only for Ninja to show download progress
-
-    FetchContent_MakeAvailable(curl)
-
-    add_library(curl_int INTERFACE)
-    target_link_libraries(curl_int INTERFACE libcurl)
-    target_include_directories(curl_int INTERFACE ${curl_SOURCE_DIR}/include ${curl_BINARY_DIR}/include/curl)
-    add_library(CURL::libcurl ALIAS curl_int)
-
-    # Group under the "external" project folder in IDEs such as Visual Studio.
-    if(BUILD_CURL_EXE)
-        set_property(TARGET curl PROPERTY FOLDER "external")
-    endif()
-        
-    set_property(TARGET libcurl PROPERTY FOLDER "external")
-endif()
+#if(USE_SYSTEM_CURL)
+#    find_package(CURL COMPONENTS PROTOCOLS HTTP HTTPS FEATURES SSL)
+#    if (CURL_FOUND)
+#        set(SSL_ENABLED ON CACHE INTERNAL "" FORCE)
+#    else()
+#        find_package(CURL COMPONENTS PROTOCOLS HTTP)
+#        if(CURL_FOUND)
+#            set(SSL_ENABLED OFF CACHE INTERNAL "" FORCE)
+#        endif()
+#    endif()
+#endif()
+#if(NOT USE_SYSTEM_CURL OR NOT CURL_FOUND)
+#    message(STATUS "Not using system Curl, using built-in curl project instead.")
+#    
+#    set(BUILD_CURL_EXE OFF CACHE INTERNAL "" FORCE)
+#    set(BUILD_TESTING OFF CACHE INTERNAL "" FORCE)
+#    set(HTTP_ONLY ON CACHE INTERNAL "" FORCE)
+#
+#    if (USE_WINSSL OR USE_OPENSSL)
+#        set(SSL_ENABLED ON CACHE INTERNAL "" FORCE)
+#    else()
+#        set(CURL_CA_PATH "none" CACHE INTERNAL "" FORCE)
+#    endif()
+#
+#    if(USE_WINSSL)
+#        set(CMAKE_USE_WINSSL ON CACHE INTERNAL "" FORCE)
+#        set(CURL_CA_PATH "none" CACHE INTERNAL "" FORCE)
+#    endif()
+#
+#    if(USE_OPENSSL) 
+#        set(CMAKE_USE_OPENSSL ON CACHE INTERNAL "" FORCE)
+#    endif()
+#
+#    # Show progress of FetchContent:
+#    set(FETCHCONTENT_QUIET OFF CACHE INTERNAL "" FORCE)
+#    FetchContent_Declare(curl
+#                         GIT_REPOSITORY         https://github.com/curl/curl.git
+#                         GIT_TAG                b81e0b07784dc4c1e8d0a86194b9d28776d071c0 # the hash for curl-7_69_1
+#                         GIT_PROGRESS           TRUE
+#                         USES_TERMINAL_DOWNLOAD TRUE)   # <---- This is needed only for Ninja to show download progress
+#
+#    FetchContent_MakeAvailable(curl)
+#
+#    add_library(curl_int INTERFACE)
+#    target_link_libraries(curl_int INTERFACE libcurl)
+#    target_include_directories(curl_int INTERFACE ${curl_SOURCE_DIR}/include ${curl_BINARY_DIR}/include/curl)
+#    add_library(CURL::libcurl ALIAS curl_int)
+#
+#    # Group under the "external" project folder in IDEs such as Visual Studio.
+#    if(BUILD_CURL_EXE)
+#        set_property(TARGET curl PROPERTY FOLDER "external")
+#    endif()
+#        
+#    set_property(TARGET libcurl PROPERTY FOLDER "external")
+#endif()
 
 # GTest configuration
-if(BUILD_CPR_TESTS)
-    if(USE_SYSTEM_GTEST)
-        find_package(GTest)
-    endif()
-    if(NOT USE_SYSTEM_GTEST OR NOT GTEST_FOUND)
-        message(STATUS "Not using system gtest, using built-in googletest project instead.")
-        if(MSVC)
-            # By default, GTest compiles on Windows in CRT static linkage mode. We use this
-            # variable to force it into using the CRT in dynamic linkage (DLL), just as CPR
-            # does.
-            set(gtest_force_shared_crt ON CACHE BOOL "Force gtest to use the shared c runtime")
-        endif()
-        FetchContent_Declare(googletest
-                             GIT_REPOSITORY         https://github.com/google/googletest.git
-                             GIT_TAG                703bd9caab50b139428cea1aaff9974ebee5742e # the hash for release-1.10.0
-                             GIT_PROGRESS           TRUE
-                             USES_TERMINAL_DOWNLOAD TRUE)   # <---- This is needed only for Ninja to show download progress
-        FetchContent_MakeAvailable(googletest)
-        
-        add_library(gtest_int INTERFACE)
-        target_link_libraries(gtest_int INTERFACE gtest)
-        target_include_directories(gtest_int INTERFACE ${googletest_SOURCE_DIR}/include)
-
-        add_library(GTest::GTest ALIAS gtest_int)
-       
-        # Group under the "tests/gtest" project folder in IDEs such as Visual Studio.
-    set_property(TARGET gtest PROPERTY FOLDER "tests/gtest")
-    set_property(TARGET gtest_main PROPERTY FOLDER "tests/gtest")
-    endif()
-endif()
+#if(BUILD_CPR_TESTS)
+#    if(USE_SYSTEM_GTEST)
+#        find_package(GTest)
+#    endif()
+#    if(NOT USE_SYSTEM_GTEST OR NOT GTEST_FOUND)
+#        message(STATUS "Not using system gtest, using built-in googletest project instead.")
+#        if(MSVC)
+#            # By default, GTest compiles on Windows in CRT static linkage mode. We use this
+#            # variable to force it into using the CRT in dynamic linkage (DLL), just as CPR
+#            # does.
+#            set(gtest_force_shared_crt ON CACHE BOOL "Force gtest to use the shared c runtime")
+#        endif()
+#        FetchContent_Declare(googletest
+#                             GIT_REPOSITORY         https://github.com/google/googletest.git
+#                             GIT_TAG                703bd9caab50b139428cea1aaff9974ebee5742e # the hash for release-1.10.0
+#                             GIT_PROGRESS           TRUE
+#                             USES_TERMINAL_DOWNLOAD TRUE)   # <---- This is needed only for Ninja to show download progress
+#        FetchContent_MakeAvailable(googletest)
+#        
+#        add_library(gtest_int INTERFACE)
+#        target_link_libraries(gtest_int INTERFACE gtest)
+#        target_include_directories(gtest_int INTERFACE ${googletest_SOURCE_DIR}/include)
+#
+#        add_library(GTest::GTest ALIAS gtest_int)
+#       
+#        # Group under the "tests/gtest" project folder in IDEs such as Visual Studio.
+#    set_property(TARGET gtest PROPERTY FOLDER "tests/gtest")
+#    set_property(TARGET gtest_main PROPERTY FOLDER "tests/gtest")
+#    endif()
+#endif()
 
 
 # Mongoose configuration
-if(BUILD_CPR_TESTS)
-    message(STATUS "Building mongoose project for test support.")
-    if (SSL_ENABLED)
-        find_package(OpenSSL)
-        if (OPENSSL_FOUND)
-            set(ENABLE_SSL_TESTS ${BUILD_CPR_TESTS_SSL} CACHE INTERNAL "")
-        else()
-            set(ENABLE_SSL_TESTS OFF CACHE INTERNAL "")
-        endif()
-    else()
-            set(ENABLE_SSL_TESTS OFF CACHE INTERNAL "")
-    endif()
-
-    FetchContent_Declare(mongoose 
-                         GIT_REPOSITORY         https://github.com/cesanta/mongoose.git
-                         GIT_TAG                80d74e9e341d541f71c0fa587d22cec89be32dd5 # the hash for 6.18
-                         GIT_PROGRESS           TRUE
-                         USES_TERMINAL_DOWNLOAD TRUE)   # <---- This is needed only for Ninja to show download progress
-    # We can not use FetchContent_MakeAvailable, since we need to patch mongoose to use CMake
-    if (NOT mongoose_POPULATED)
-        FetchContent_POPULATE(mongoose)
-
-        file(INSTALL cmake/mongoose.CMakeLists.txt DESTINATION ${mongoose_SOURCE_DIR})
-        file(RENAME ${mongoose_SOURCE_DIR}/mongoose.CMakeLists.txt ${mongoose_SOURCE_DIR}/CMakeLists.txt)
-        add_subdirectory(${mongoose_SOURCE_DIR} ${mongoose_BINARY_DIR})
-
-    endif()
-    # Group under the "external" project folder in IDEs such as Visual Studio.
-    set_property(TARGET mongoose PROPERTY FOLDER "external")
-endif()
-
+#if(BUILD_CPR_TESTS)
+#    message(STATUS "Building mongoose project for test support.")
+#    if (SSL_ENABLED)
+#        find_package(OpenSSL)
+#        if (OPENSSL_FOUND)
+#            set(ENABLE_SSL_TESTS ${BUILD_CPR_TESTS_SSL} CACHE INTERNAL "")
+#        else()
+#            set(ENABLE_SSL_TESTS OFF CACHE INTERNAL "")
+#        endif()
+#    else()
+#            set(ENABLE_SSL_TESTS OFF CACHE INTERNAL "")
+#    endif()
+#
+#    FetchContent_Declare(mongoose 
+#                         GIT_REPOSITORY         https://github.com/cesanta/mongoose.git
+#                         GIT_TAG                80d74e9e341d541f71c0fa587d22cec89be32dd5 # the hash for 6.18
+#                         GIT_PROGRESS           TRUE
+#                         USES_TERMINAL_DOWNLOAD TRUE)   # <---- This is needed only for Ninja to show download progress
+#    # We can not use FetchContent_MakeAvailable, since we need to patch mongoose to use CMake
+#    if (NOT mongoose_POPULATED)
+#        FetchContent_POPULATE(mongoose)
+#
+#        file(INSTALL cmake/mongoose.CMakeLists.txt DESTINATION ${mongoose_SOURCE_DIR})
+#        file(RENAME ${mongoose_SOURCE_DIR}/mongoose.CMakeLists.txt ${mongoose_SOURCE_DIR}/CMakeLists.txt)
+#        add_subdirectory(${mongoose_SOURCE_DIR} ${mongoose_BINARY_DIR})
+#
+#    endif()
+#    # Group under the "external" project folder in IDEs such as Visual Studio.
+#    set_property(TARGET mongoose PROPERTY FOLDER "external")
+#endif()
+#
 
 add_subdirectory(cpr)
 add_subdirectory(include)
 
-if(BUILD_CPR_TESTS)
-    enable_testing()
-    add_subdirectory(test)
-endif()
+#if(BUILD_CPR_TESTS)
+#    enable_testing()
+#    add_subdirectory(test)
+#endif()
diff --git a/cpr/CMakeLists.txt b/cpr/CMakeLists.txt
index 563b785..f709a6b 100644
--- a/cpr/CMakeLists.txt
+++ b/cpr/CMakeLists.txt
@@ -20,7 +20,7 @@ add_library(cpr
 
 add_library(cpr::cpr ALIAS cpr)
 
-target_link_libraries(cpr PUBLIC CURL::libcurl) # todo should be private, but first dependencys in ssl_options need to be removed
+target_link_libraries(cpr PRIVATE curl) # todo should be private, but first dependencys in ssl_options need to be removed
 
 # Set version for shared libraries.
 set_target_properties(cpr
-- 
2.26.2

